\
/*
   Updated
   V1.1 12 April, 2023
*/

/*
 **************Connections**************
  H3LIS331DL           FireBeetle ESP8266
    VCC        ->           3V3
    GND        ->           GND
    SDA        ->           IO4
    SCL        ->           IO5
    INT1       ->           IO14
*/
#include <Arduino.h>
#include <Firebase_ESP_Client.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <Wire.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <ESP8266mDNS.h>
#include "SparkFun_LIS331.h"

LIS331 xl;                                                                    // I2C address of the sensor

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"
//-------------WIFI & IFTTT--------------------------------------------------------
const char* ssid = "Reese";
const char* password = "Okcthunder13";
//const char* event = "shock_detected";                                         //IFTTT Applet event handler, replace with your or add this in your applet
const char* key = "TgBSY5ZXvmZDUjqC6Jw9E";              //Webhook key, replace with yours
//const char* host = "maker.ifttt.com";
const char* serverName = "http://maker.ifttt.com/trigger/threshold_reached/with/key/TgBSY5ZXvmZDUjqC6Jw9E";

//-------------FIREBASE------------------------------------------------
// Insert Authorized Email and Corresponding Password
#define USER_EMAIL "billtracy474@gmail.com"
#define USER_PASSWORD "MBI77777"
// Insert Firebase project API Key
#define API_KEY "AIzaSyAwqmysy4jRW1LfuOZi8MRTgOVqD6uBNJU"
// Insert RTDB URLefine the RTDB URL
#define DATABASE_URL "https://testing-for-monitoring-window-default-rtdb.firebaseio.com/"

// Define Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
// Variable to save USER UID
String uid;

// Database main path (to be updated in setup with the user UID)
String databasePath;
// Database child nodes
String Battery_path = "/battery_percentage";
String impact = "/Impact";
String room = "/room";
// Parent Node (to be updated in every loop)
String parentPath;

FirebaseJson json;

// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

// Variable to save current epoch time
int timestamp;

//---------------------------------------------------------------------                                                       
int analogInPin  = A0;                                                        // Analog input pin
int sensorValue;                                                              // Analog Output of Sensor
float calibration = 0.36;                                                     // Check Battery voltage using multimeter & add/subtract the value
int bat_percentage;
int16_t x, y, z;
// Function that gets current epoch time
unsigned long getTime() 
{
  timeClient.update();
  unsigned long now = timeClient.getEpochTime();
  return now;
}
// Initialize WiFi
void initWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  Serial.println();
}
  
void setup() {
  Serial.begin(9600);
  Serial.setTimeout(2000);
  while (!Serial) { }

  Serial.println("Interrupted!");

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("WiFi connected");
  
  initWiFi();
  timeClient.begin();

  // Assign the api key (required)
  config.api_key = API_KEY;

  // Assign the user sign in credentials
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  // Assign the RTDB URL (required)
  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);

  // Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h

  // Assign the maximum retry of token generation
  config.max_token_generation_retry = 5;

  // Initialize the library with the Firebase authen and config
  Firebase.begin(&config, &auth);

  // Getting the user UID might take a few seconds
  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  // Print user UID
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  // Update database path
  databasePath = "/UsersData/" + uid + "/readings";

  
  Wire.begin();

  xl.setI2CAddr(0x19);                                                          //I2C sensor address
  xl.begin(LIS331::USE_I2C);

  xl.intSrcConfig(LIS331::INT_SRC, 1);                                          // Select the source of the signal which appears on pin INT1
  xl.setPowerMode(LIS331::NORMAL);
  xl.setIntDuration(10, 1);                                                     // Number of samples a value must meet the interrupt condition before an interrupt signal is issued. At the default rate of 50Hz, this is one sec.
  xl.setODR(LIS331::DR_1000HZ);
  xl.setFullScale(LIS331::HIGH_RANGE);
  xl.setIntThreshold(3, 1);                                                     // Threshold for an interrupt. This is not actual counts, but rather, actual counts divided by 16.

  xl.enableInterrupt(LIS331::X_AXIS, LIS331::TRIG_ON_HIGH, 1, true);            //Enable the interrupt for X-axis value
  xl.enableInterrupt(LIS331::Y_AXIS, LIS331::TRIG_ON_HIGH, 1, true);            //Enable the interrupt for Y-axis value
  xl.enableInterrupt(LIS331::Z_AXIS, LIS331::TRIG_ON_HIGH, 1, true);            //Enable the interrupt for Z-axis value

  Serial.println("Initialized.");

  
}

void loop() {
  delay(10);
  Firebase_action();
  sendEmail();
  delay(5000);
  Serial.println("Going to sleep!");
  ESP.deepSleep(0);                                                             // Go to low power mode until interrupted again
}

void sendEmail() {
  if(WiFi.status()== WL_CONNECTED)
  {
      WiFiClient client;
      HTTPClient http;
      
      // Your Domain name with URL path or IP address with path
      http.begin(client, serverName);
      
      sensorValue = analogRead(analogInPin);
      float voltage = (((sensorValue * 3.3) / 1024) * 2 + calibration);                     //multiply by two as voltage divider network is 100K & 100K Resistor
 
      bat_percentage = mapfloat(voltage, 2.8, 4.2, 0, 100);                                 //2.8V as Battery Cut off Voltage & 4.2V as Maximum Voltage
 
      if (bat_percentage >= 100)
      {
         bat_percentage = 100;
      }
         if (bat_percentage <= 0)
      {
         bat_percentage = 1;
      }
      xl.readAxes(x, y, z);
      
      http.addHeader("Content-Type", "application/json");
      // JSON data to send with HTTP POST
      String httpRequestData = "{\"value1\":\"" + String(bat_percentage) + "\",\"value2\":\"" + String(2241) + "\",\"value3\":\"" + String(y) + "\"}";
      // Send HTTP POST request
      int httpResponseCode = http.POST(httpRequestData);
      http.end();
    }
    else {
      Serial.println("WiFi Disconnected");
    }
}

float mapfloat(float x, float in_min, float in_max, float out_min, float out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void Firebase_action()
{
    parentPath= databasePath + "/" + String(timestamp);
    sensorValue = analogRead(analogInPin);
  
    float voltage = (((sensorValue * 3.3) / 1024) * 2 + calibration);                     //multiply by two as voltage divider network is 100K & 100K Resistor
 
    bat_percentage = mapfloat(voltage, 2.8, 4.2, 0, 100);                                 //2.8V as Battery Cut off Voltage & 4.2V as Maximum Voltage
 
    if (bat_percentage >= 100)
        {
          bat_percentage = 100;
        }
    if (bat_percentage <= 0)
        {
          bat_percentage = 1;
        }
    Serial.println(bat_percentage);


    xl.readAxes(x, y, z);                                                                 // The readAxes() function transfers the
    Serial.print("X: ");
    Serial.print(xl.convertToG(400,x));
    Serial.print(" Y: ");
    Serial.print(xl.convertToG(400,y));
    Serial.print(" Z: ");
    Serial.println(xl.convertToG(400,z));

    json.set(Battery_path.c_str(), String(bat_percentage));
    json.set(impact.c_str(), String(1));
    json.set(room.c_str(), String(2241));
    Serial.printf("Set json... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str()); 
}
